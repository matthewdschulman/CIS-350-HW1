package edu.upenn.cis350.hwk1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.TreeSet;

public class DataParsing {

	public static HashMap<String, TreeSet<String>> getProfToCourses(
			File courseEvalFile) throws IOException {
		// Set up the return data structure
		HashMap<String, TreeSet<String>> profToCourses = 
				new HashMap<String, TreeSet<String>>();
		
		// Read through the file and create mappings for each prof
		// to the courses that he teaches
		try {
			BufferedReader br = new BufferedReader(new FileReader(courseEvalFile));
			String line;
		    while ((line = br.readLine()) != null) {
		        String[] curLine = line.split(",");
		        String curProf = curLine[1];
		        // check if the current prof already has been assigned courses
		        TreeSet<String> curSetOfClasses = null;
		        if (profToCourses.get(curProf) == null) {
		        	curSetOfClasses = new TreeSet<String>();
		        } else {
		        	curSetOfClasses = profToCourses.get(curProf);
		        }
		        curSetOfClasses.add(curLine[0]);
	        	profToCourses.put(curProf, curSetOfClasses);
		    }
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		// return the professor to course mapping
		return profToCourses;
	}

	public static LinkedHashMap<String, Double> getRatios(File courseEvalFile) throws IOException {
		// Get the ratios for each course, keeping track of each section's number
		// of students and the quality and difficulty ratings
		HashMap<String, CollegeClass> classTracker = new HashMap<String, CollegeClass>();
		try {
			BufferedReader br = new BufferedReader(new FileReader(courseEvalFile));
			String line;
		    while ((line = br.readLine()) != null) {
		        String[] curLine = line.split(",");
		        String curClass = curLine[0];
		        int numOfStudents = Integer.parseInt(curLine[2]);
		        Double courseQualityScore = Double.parseDouble(curLine[3]);
		        Double courseDifficultyScore = Double.parseDouble(curLine[4]);
		        // check if the current class already has been encountered
		        if (classTracker.get(curClass) == null) {
		        	CollegeClass curClassObj = new CollegeClass(curClass, numOfStudents, 
		        		courseQualityScore, courseDifficultyScore);
		        } else {
		        }
		    }
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		
		// Sort the linked hash map by value (the difficulty-to-quality ratio)
		return null;
	}

}
